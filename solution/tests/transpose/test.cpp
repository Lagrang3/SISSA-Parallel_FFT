#include <iostream>
#include <fstream>
#include <mpi.h>
#include "mpi_handler.h"
#include "parallel_buffer.h"
using namespace std;
int r;

valarray<int> tmp,xy,xz,yz,alltoall,xz_alltoall,xz_alltoall_xy;

int cmp(const parallel_buff_3D<int>& A,const valarray<int>& B){
	int n = A.size(),m=B.size();
	
	if(n!=m){	
		cerr<<"size mismatch "<<n<<" "<<m<<"\n";
		return 1;
	}
	for(int i=0;i<n;++i)if(A[i]!=B[i]){
		if(r==0){
			cerr<< i<<": "<<std::hex<< A[i] <<" diff "<<std::hex<<B[i]<<"\n";
		
			for(int j=0;j<n;++j)cerr<<std::hex<<A[j]<<"\n";
		}
		return 1;
	}
	return 0;
}

int main(int narg,char** args){
	mpi_handler mpi;	
	mpi_comm com = mpi.get_com();
	
	r=com.rank();
	
	const int nc=4; 
	
	parallel_buff_3D<int> A(com,{nc,nc,nc});	
	
	if(narg<2){
		cerr<<"argument not provided\n";
		return 1;
	}
			
	string s(args[1]);
	
	
	
	if(com.rank()==0){
		tmp = valarray<int>{
			0x000,0x001,0x002,0x003,
			0x010,0x011,0x012,0x013,
			0x020,0x021,0x022,0x023,
			0x030,0x031,0x032,0x033,
			0x100,0x101,0x102,0x103,
			0x110,0x111,0x112,0x113,
			0x120,0x121,0x122,0x123,
			0x130,0x131,0x132,0x133
		};
		xy = valarray<int>{
			0x000,0x001,0x002,0x003,
			0x100,0x101,0x102,0x103,
			
			0x010,0x011,0x012,0x013,
			0x110,0x111,0x112,0x113,
			
			0x020,0x021,0x022,0x023,
			0x120,0x121,0x122,0x123,
			
			0x030,0x031,0x032,0x033,
			0x130,0x131,0x132,0x133
			
		};
		xz_alltoall_xy = valarray<int>{
			0x000,0x100,
			0x200,0x300,
			0x010,0x110,
			0x210,0x310,
			
			0x020,0x120,
			0x220,0x320,
			0x030,0x130,
			0x230,0x330,
			
			0x001,0x101,
			0x201,0x301,
			0x011,0x111,
			0x211,0x311,
			
			0x021,0x121,
			0x221,0x321,
			0x031,0x131,	
			0x231,0x331
			
		};
		xz = valarray<int>{
			0x000,0x100,
			0x010,0x110,
			0x020,0x120,
			0x030,0x130,
			
			0x001,0x101,
			0x011,0x111,
			0x021,0x121,
			0x031,0x131,
			
			0x002,0x102,
			0x012,0x112,
			0x022,0x122,
			0x032,0x132,
			
			0x003,0x103,
			0x013,0x113,
			0x023,0x123,
			0x033,0x133
		};
		xz_alltoall = valarray<int>{
			0x000,0x100,
			0x010,0x110,
			0x020,0x120,
			0x030,0x130,
			
			0x001,0x101,
			0x011,0x111,
			0x021,0x121,
			0x031,0x131,
			
			0x200,0x300,
			0x210,0x310,
			0x220,0x320,
			0x230,0x330,
			
			0x201,0x301,
			0x211,0x311,
			0x221,0x321,
			0x231,0x331
			
		};
		yz = valarray<int>{
			0x000,0x010,0x020,0x030,
			0x001,0x011,0x021,0x031,	
			0x002,0x012,0x022,0x032,
			0x003,0x013,0x023,0x033,
			
			0x100,0x110,0x120,0x130,
			0x101,0x111,0x121,0x131,
			0x102,0x112,0x122,0x132,		
			0x103,0x113,0x123,0x133
			
		};
		
		
		alltoall = valarray<int>{
			0x000,0x001,0x002,0x003,
			0x010,0x011,0x012,0x013,
			0x020,0x021,0x022,0x023,
			0x030,0x031,0x032,0x033,
			
			0x200,0x201,0x202,0x203,
			0x210,0x211,0x212,0x213,
			0x220,0x221,0x222,0x223,
			0x230,0x231,0x232,0x233
		
		};
		
		
	}else{
		tmp = valarray<int>{
			0x200,0x201,0x202,0x203,
			0x210,0x211,0x212,0x213,
			0x220,0x221,0x222,0x223,
			0x230,0x231,0x232,0x233,
			0x300,0x301,0x302,0x303,
			0x310,0x311,0x312,0x313,
			0x320,0x321,0x322,0x323,
			0x330,0x331,0x332,0x333
		};
		xy = valarray<int>{
			0x200,0x201,0x202,0x203,
			0x300,0x301,0x302,0x303,
			
			0x210,0x211,0x212,0x213,
			0x310,0x311,0x312,0x313,
			
			0x220,0x221,0x222,0x223,
			0x320,0x321,0x322,0x323,
			
			0x230,0x231,0x232,0x233,
			0x330,0x331,0x332,0x333
			
		};
		xz_alltoall_xy = valarray<int>{
			0x002,0x102,
			0x202,0x302,
			0x012,0x112,
			0x212,0x312,
			0x022,0x122,
			0x222,0x322,
			0x032,0x132,
			0x232,0x332,
			
			0x003,0x103,
			0x203,0x303,
			0x013,0x113,
			0x213,0x313,
			0x023,0x123,
			0x223,0x323,
			0x033,0x133,
			0x233,0x333
		};
		yz = valarray<int>{
			0x200,0x210,0x220,0x230,
			0x201,0x211,0x221,0x231,	
			0x202,0x212,0x222,0x232,
			0x203,0x213,0x223,0x233,
			
			0x300,0x310,0x320,0x330,
			0x301,0x311,0x321,0x331,
			0x302,0x312,0x322,0x332,		
			0x303,0x313,0x323,0x333
			
		};
		xz = valarray<int>{
			0x200,0x300,
			0x210,0x310,
			0x220,0x320,
			0x230,0x330,
			
			0x201,0x301,
			0x211,0x311,
			0x221,0x321,
			0x231,0x331,
			
			0x202,0x302,
			0x212,0x312,
			0x222,0x322,
			0x232,0x332,
			
			0x203,0x303,
			0x213,0x313,
			0x223,0x323,
			0x233,0x333
		};
		alltoall = valarray<int>{
			0x100,0x101,0x102,0x103,
			0x110,0x111,0x112,0x113,
			0x120,0x121,0x122,0x123,
			0x130,0x131,0x132,0x133,
			
			0x300,0x301,0x302,0x303,
			0x310,0x311,0x312,0x313,
			0x320,0x321,0x322,0x323,
			0x330,0x331,0x332,0x333
		};
		xz_alltoall = valarray<int>{
			0x002,0x102,
			0x012,0x112,
			0x022,0x122,
			0x032,0x132,
			
			0x003,0x103,
			0x013,0x113,
			0x023,0x123,
			0x033,0x133,
			
			
			0x202,0x302,
			0x212,0x312,
			0x222,0x322,
			0x232,0x332,
			
			0x203,0x303,
			0x213,0x313,
			0x223,0x323,
			0x233,0x333
		};
	
	}
	int n=A.size();
	for(int i=0;i<n;++i)A[i] = tmp[i];

	if(s=="xy"){
		A.transpose_xy();
		return cmp(A,xy);	
		
	}else if(s=="xz"){
		A.transpose_xz();
		return cmp(A,xz);
		
	}else if(s=="yz"){
		A.transpose_yz();
		return cmp(A,yz);
		
	}else if(s=="alltoall"){
		A.all_to_all();
		return cmp(A,alltoall);
		
	}else if(s=="xz_alltoall"){
		A.transpose_xz();
		A.all_to_all();
		return cmp(A,xz_alltoall);
		
	}else if(s=="xz_alltoall_xy"){
		A.transpose_xz();
		A.all_to_all();
		auto nloc = A.get_nloc();
		swap(nloc[0],nloc[1]);
		nloc[1]*=com.size(), nloc[0]/=com.size();
		A.N_loc = nloc;
		A.transpose_xy();
		return cmp(A,xz_alltoall_xy);
	}else if(s=="id"){
		A.transpose_xz();
		A.all_to_all();
		auto nloc = A.get_nloc();
		swap(nloc[0],nloc[1]);
		nloc[1]*=com.size(), nloc[0]/=com.size();
		A.N_loc = nloc;
		A.transpose_xy();
		
		A.transpose_xy();
		nloc = A.get_nloc();
		nloc[0]*=com.size(), nloc[1]/=com.size();
		swap(nloc[0],nloc[1]);
		A.N_loc = nloc;
		A.all_to_all();
		A.transpose_xz();
		
		
		
		return cmp(A,tmp);
		
	}else{
		cerr<<"unknown option "<<s<<"\n";
		return 1;
	}
	return 0;
}
